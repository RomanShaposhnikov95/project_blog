{"version":3,"sources":["class.blog.js"],"names":["_settings","Object","keys","forEach","name","path","url","Promise","resolve","reject","rawFile","XMLHttpRequest","overrideMimeType","open","concat","onreadystatechange","readyState","status","result","JSON","parse","responseText","send","then","attribute","elements","document","querySelectorAll","element","translateKey","getAttribute","innerHTML","removeAttribute","error","console","settingAttribute","configAttribute","settings","setting","parentKey","childKey","querySelector","addEventListener","data","setTimeout","message","response","log","confirm"],"mappings":"AAAA,cAAC,WAuBG,GAAIA,UAAW,CACXC,OAAOC,KAAKF,WAAWG,SAAQ,SAAAC,GAAQ,IAvB1BC,EAwBDC,EAAQN,UAAUI,GAAlBE,KAxBCD,EA0BAC,EAzBN,IAAIC,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAU,IAAIC,eAEpBD,EAAQE,iBAAiB,oBACzBF,EAAQG,KAAK,MAAb,iBAAAC,OAAqCT,EAArC,UAAkD,GAClDK,EAAQK,mBAAqB,WACzB,GAA2B,IAAvBL,EAAQM,YAAsC,OAAlBN,EAAQO,OAAiB,CACrD,IAAMC,EAASC,KAAKC,MAAMV,EAAQW,cAElCb,EAAQU,GAGU,OAAlBR,EAAQO,QACRR,EAAO,OAIfC,EAAQY,KAAK,UASRC,MAAK,SAAAL,GACF,IAAMM,EAAS,kBAAAV,OAAqBR,GAC9BmB,EAAWC,SAASC,iBAAT,IAAAb,OAA8BU,EAA9B,MAEbC,GACAA,EAAStB,SAAQ,SAAAyB,GACb,IAAMC,EAAeD,EAAQE,aAAaN,GAE1CI,EAAQG,UAAYb,EAAOW,GAC3BD,EAAQI,gBAAgBR,SAVxC,OAcW,SAACS,GACJC,QAAQD,MAAM,QAASA,SAInC,IAAME,EAAmB,eACnBC,EAAkB,cAClBC,EAAWX,SAASC,iBAAT,IAAAb,OAA8BqB,EAA9B,MAEbE,GACAA,EAASlC,SAAQ,SAAAmC,GACb,IAAMC,EAAYD,EAAQR,aAAaK,GACjCK,EAAWF,EAAQR,aAAaM,GAElCG,GAAaC,IACbF,EAAQP,UAAY/B,UAAUuC,GAAWC,GAEzCF,EAAQN,gBAAgBG,GACxBG,EAAQN,gBAAgBI,OA8B1BV,SAASe,cAAc,eAC/BC,iBAAiB,SAbL,WAZK,IAAAC,EACZ,IAAIpC,SAAQ,SAAAC,GACfoC,YAAW,WACPpC,EAAQ,CACJqC,QAAS,UACTF,KAAAA,MAEL,SAOFpB,MAAK,SAAAuB,GACFZ,QAAQa,IAAI,UAAWD,EAASH,SAFxC,OAIW,SAAAV,GACHe,QAAQf,MAAM,QAASA,SAnFtC","file":"app.min.js","sourcesContent":["(function() {\n    const readJSON = path => {\n        return new Promise((resolve, reject) => {\n            const rawFile = new XMLHttpRequest();\n\n            rawFile.overrideMimeType('application/json');\n            rawFile.open('GET', `./assets/json/${path}.json`, true);\n            rawFile.onreadystatechange = () => {\n                if (rawFile.readyState === 4 && rawFile.status == '200') {\n                    const result = JSON.parse(rawFile.responseText);\n\n                    resolve(result);\n                }\n\n                if (rawFile.status == '404') {\n                    reject(null);\n                }\n            }\n\n            rawFile.send(null);\n        });\n    };\n\n    if (_settings) {\n        Object.keys(_settings).forEach(name => {\n            const { url } = _settings[name];\n\n            readJSON(url)\n                .then(result => {\n                    const attribute = `data-translate-${url}`;\n                    const elements = document.querySelectorAll(`[${attribute}]`);\n\n                    if (elements) {\n                        elements.forEach(element => {\n                            const translateKey = element.getAttribute(attribute);\n\n                            element.innerHTML = result[translateKey];\n                            element.removeAttribute(attribute);\n                        });\n                    }\n                })\n                .catch((error) => {\n                    console.error('error', error);\n                })\n        });\n\n        const settingAttribute = 'data-setting';\n        const configAttribute = 'data-config';\n        const settings = document.querySelectorAll(`[${settingAttribute}]`);\n\n        if (settings) {\n            settings.forEach(setting => {\n                const parentKey = setting.getAttribute(settingAttribute);\n                const childKey = setting.getAttribute(configAttribute);\n\n                if (parentKey && childKey) {\n                    setting.innerHTML = _settings[parentKey][childKey];\n\n                    setting.removeAttribute(settingAttribute);\n                    setting.removeAttribute(configAttribute);\n                }\n            });\n        }\n    }\n\n    const emulateRequest = data => {\n        return new Promise(resolve => {\n            setTimeout(() => {\n                resolve({\n                    message: 'success',\n                    data\n                });\n            }, 2500);\n        })\n    }\n    \n\n    const sendEmail = () => {\n        emulateRequest() \n            .then(response => {\n                console.log('success', response.data);\n            })\n            .catch(error => {\n                confirm.error('error', error);\n            });\n    }\n\n\n\n    const input = document.querySelector('.send-email');\n    input.addEventListener('click', sendEmail);\n    \n}());\n"]}